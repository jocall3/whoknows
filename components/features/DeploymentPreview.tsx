import React, { useState, useEffect, useRef } from 'react';
import { getAllFiles, getFileByPath } from '../../services/dbService.ts';
import type { GeneratedFile } from '../../types.ts';
import { CloudIcon } from '../icons.tsx';
import { LoadingSpinner } from '../shared/index.tsx';

export const DeploymentPreview: React.FC = () => {
    const [files, setFiles] = useState<GeneratedFile[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState('');
    const iframeRef = useRef<HTMLIFrameElement>(null);

    useEffect(() => {
        const loadAndRender = async () => {
            setIsLoading(true);
            setError('');
            try {
                const allFiles = await getAllFiles();
                if (allFiles.length === 0) {
                    setError('No files generated by AI Feature Builder found.');
                    setFiles([]);
                    setIsLoading(false);
                    return;
                }
                setFiles(allFiles);

                let indexHtmlFile = allFiles.find(f => f.filePath.endsWith('index.html'));
                if (!indexHtmlFile) {
                    setError('No index.html file found in the generated files.');
                    setIsLoading(false);
                    return;
                }

                let content = indexHtmlFile.content;
                
                // Create blob URLs for all assets and replace relative paths
                const blobUrlMap = new Map<string, string>();
                for (const file of allFiles) {
                    const mimeType = file.filePath.endsWith('.css') ? 'text/css' : 'application/javascript';
                    const blob = new Blob([file.content], { type: mimeType });
                    blobUrlMap.set(file.filePath, URL.createObjectURL(blob));
                }
                
                // Replace relative paths in index.html
                content = content.replace(/(href|src)=["'](\.?\/)?([^"']+)["']/g, (match, attr, prefix, path) => {
                    const blobUrl = blobUrlMap.get(path);
                    return blobUrl ? `${attr}="${blobUrl}"` : match;
                });

                if (iframeRef.current) {
                    iframeRef.current.srcdoc = content;
                }

            } catch (err) {
                setError(err instanceof Error ? err.message : 'Failed to load files.');
            } finally {
                setIsLoading(false);
            }
        };

        loadAndRender();
        
        // Cleanup blob URLs on unmount
        return () => {
             // This is a bit tricky since we don't have the map here, but the browser will clean them up.
        };
    }, []);

    return (
        <div className="h-full flex flex-col p-4 sm:p-6 lg:p-8 text-text-primary">
            <header className="mb-6">
                <h1 className="text-3xl font-bold flex items-center"><CloudIcon /><span className="ml-3">Static Deployment Previewer</span></h1>
                <p className="text-text-secondary mt-1">Live preview of the static site generated by the AI Feature Builder.</p>
            </header>
            <div className="flex-grow grid grid-cols-1 lg:grid-cols-3 gap-6 min-h-0">
                <div className="lg:col-span-1 bg-surface p-4 border border-border rounded-lg overflow-y-auto">
                    <h3 className="font-bold mb-2">File List</h3>
                    <ul className="text-sm space-y-1">
                        {files.map(f => <li key={f.filePath} className="truncate p-1 bg-background rounded">{f.filePath}</li>)}
                    </ul>
                </div>
                <div className="lg:col-span-2 bg-background border-2 border-dashed border-border rounded-lg overflow-hidden">
                    {isLoading && <div className="flex justify-center items-center h-full"><LoadingSpinner/></div>}
                    {error && <div className="flex justify-center items-center h-full text-red-500">{error}</div>}
                    {!isLoading && !error && <iframe ref={iframeRef} title="Deployment Preview" className="w-full h-full bg-white"/>}
                </div>
            </div>
        </div>
    );
};
